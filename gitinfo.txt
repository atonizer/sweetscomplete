Quick setup — if you’ve done this kind of thing before
or

git clone
git@github.com:atonizer/spesialist_php.git

We recommend every repository include a README, LICENSE, and .gitignore.
…or create a new repository on the command line

echo "# spesialist_php" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:atonizer/spesialist_php.git
git push -u origin master

…or push an existing repository from the command line

git remote add origin git@github.com:atonizer/spesialist_php.git
git push -u origin master

…or import code from another repository

You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

----------------------------------------------
Work with git

Первый способ

Наш проект размещается в каталоге /demo/. Было бы неплохо сохранить этот каталог и для дальнейшей работы. Для того, чтобы обезопасить себя, переименуем его /demo-temp/любым файловым менеджером. То есть теперь каталога /demo/у нас нет.

Запускаем git-bash и клонируем удаленный репозиторий на локальную машину:

git clone https://github.com/USER/demo.git

— где USER — ваше имя на гитхабе. Ссылку также можно скопировать со страницы репозитория в поле «HTTPS clone URL».

Ссылка репозитория GitHub

Появится каталог /demo/который создал git. Он должен быть пустой, кроме подкаталога «.git» — это служебный каталог, и его трогать не нужно.

Теперь копируем в каталог /demo/содержимое нашего проекта, которое мы сохранили в /demo-temp/. Всё, что мы сюда скопируем, будет вылождено на GitHub, поэтому желательно удалить все ненужные файлы. Если какие-то служебные файлы требуются для проекта, то их можно указать в файле .gitignore.


Выполняем команду

git add .

Это добавит все файлы для отслеживания git'ом. Проверить состояние (до и после add) можно командой

git status

Теперь делаем коммит (сообщение любое):

git commit -m "Sweetscomplete PHP"

Пока мы работаем с локальным репозиторием. То есть нужно настроить его так, чтобы он оказался в том виде, который отправится на гитхаб.

Для удобства можно сразу выставить метку версии (опять же любой вариант):

git tag v1.0

Теперь можно отправить изменения на гитхаб.

git push

Git может выдать сообщение, что команда push не настроена по-умолчанию. Пока не обращайте внимания на это сообщение. Нужно будет внести изменения в конфигурацию позже.

Git потребует ввести логин и пароль для GitHub.com. Учитывайте, что пароль полностью скрывается, поэтому не будет видно даже «звездочек». После ввода нажимаем Enter и git выполнит обновление удаленного репозитория.

Теперь нужно обновить метки на удаленном репозитории (если вы их задали).

git push --tags

Здесь также нужно будет ввести логин и пароль.

Всё, синхронизация выполнена! Временный каталог /demo-temp/можно удалить или сохранить как старый резервный вариант.

Если мы зайдем на страницу репозитория на гитхабе, то увидим свой проект.

Для настройки push, если требуется, пишем:

git config --global push.default simple

Второй способ

Наш проект может размещатся в любом каталоге. Для него нужно инициализировать git. Это стандартная процедура:

git init
git add .
git commit -m "Init"

Теперь для проекта git работает и его можно использовать по своему усмотрению: добавлять версии, смотреть логи, делать ветки и т.п.

Для связи с GitHub'ом следует указать удаленный репозиторий:

git remote add origin https://github.com/USER/demo.git
git push -u origin master

Этот код указывает адрес уделенного и отправляет все изменения на гитхабовский сервер. Если мы зайдем на страницу репозитория на гитхабе, то также увидим свой проект.